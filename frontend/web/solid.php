<?php

?>

<style>
    .block {
        padding: 20px;
        font-size: 12px;
        width: 90%;
        text-align: justify;
        margin-top: 20px;
    }
</style>


<div class="block">
    <a href="https://web-creator.ru/articles/solid_the_dependency_inversion_principle"> SOLID — принципы
        объектно-ориентированного программирования</a>
</div>
<div class="block">

    SOLID — это аббревиатура пяти основных принципов проектирования в объектно-ориентированном программировании — Single
    responsibility, Open-closed, Liskov substitution, Interface segregation и Dependency inversion. В переводе на
    русский: принципы единственной ответственности, открытости / закрытости, подстановки Барбары Лисков, разделения
    интерфейса и инверсии зависимостей)
</div>
<div class="block">

    Аббревиатура SOLID была предложена Робертом Мартином, автором нескольких книг, широко известных в сообществе
    разработчиков. Эти принципы позволяют строить на базе ООП масштабируемые и сопровождаемые программные продукты с
    понятной бизнес-логикой.
</div>
<div class="block">

    Расшифровка:

    Single responsibility — принцип единственной ответственности
    Open-closed — принцип открытости / закрытости
    Liskov substitution — принцип подстановки Барбары Лисков
    Interface segregation — принцип разделения интерфейса
    Dependency inversion — принцип инверсии зависимостей
</div>
<div class="block">

    Принцип единственной обязанности / ответственности (single responsibility principle / SRP) обозначает, что каждый
    объект должен иметь одну обязанность и эта обязанность должна быть полностью инкапсулирована в класс. Все его
    сервисы должны быть направлены исключительно на обеспечение этой обязанности. Подробнее про SRP...
</div>
<div class="block">

    Принцип открытости / закрытости (open-closed principle / OCP) декларирует, что программные сущности (классы, модули,
    функции и т. п.) должны быть открыты для расширения, но закрыты для изменения. Это означает, что эти сущности могут
    менять свое поведение без изменения их исходного кода. Подробнее про OCP...
</div>
<div class="block">

    Принцип подстановки Барбары Лисков (Liskov substitution principle / LSP) в формулировке Роберта Мартина: «функции,
    которые используют базовый тип, должны иметь возможность использовать подтипы базового типа не зная об этом».
    Подробнее про LSP...
</div>
<div class="block">

    Принцип разделения интерфейса (interface segregation principle / ISP) в формулировке Роберта Мартина: «клиенты не
    должны зависеть от методов, которые они не используют». Принцип разделения интерфейсов говорит о том, что слишком
    «толстые» интерфейсы необходимо разделять на более маленькие и специфические, чтобы клиенты маленьких интерфейсов
    знали только о методах, которые необходимы им в работе. В итоге, при изменении метода интерфейса не должны меняться
    клиенты, которые этот метод не используют. Подробнее про ISP...
</div>
<div class="block">

    Принцип инверсии зависимостей (dependency inversion principle / DIP) — модули верхних уровней не должны зависеть от
    модулей нижних уровней, а оба типа модулей должны зависеть от абстракций; сами абстракции не должны зависеть от
    деталей, а вот детали должны зависеть от абстракций.
</div>
<br>
<br>
<br>

<div class="block">


    Принцип программирования YAGNI — «Вам это не понадобится»
    22.04.2019 | Статьи — фронтенд-разработка / бэкенд-разработка / методологии разработки / веб-разработка
    Если упрощенно, то следование данному принципу заключается в том, что возможности, которые не описаны в требованиях
    к системе, просто не должны реализовываться. Это позволяет вести разработку, руководствуясь экономическими
    критериями — Заказчик не должен оплачивать ненужные ему функции, а разработчики не должны тратить своё оплачиваемое
    время на реализацию того, что не требуется.
</div>
<div class="block">

    Принцип программирования KISS — делайте вещи проще
    13.07.2019 | Статьи — фронтенд-разработка / бэкенд-разработка / методологии разработки / веб-разработка
    Большая часть программных систем необосновано перегружена практически ненужными функциями, что ухудшает удобство их
    использование конечными пользователями, а также усложняет их поддержку и развитие разработчиками. Следование
    принципу «KISS» позволяет разрабатывать решения, которые просты в использовании и в сопровождении.
</div>
<div class="block">
    Принцип программирования DRY — don’t repeat yourself / не повторяйте себя
    28.11.2018 | Статьи — фронтенд-разработка / бэкенд-разработка / методологии разработки / веб-разработка
    Следование принципу программирования «DRY» позволяет добиться высокой сопровождаемости проекта: простоты внесения
    изменений и качественного тестирования.
</div>


